#!/usr/bin/env python
import argparse

import meshroom
meshroom.setupEnvironment()

import meshroom.core.graph
from meshroom import multiview

parser = argparse.ArgumentParser(description='Launch the full photogrammetry pipeline.')
parser.add_argument('--input', metavar='FOLDER', type=str,
                    default='',
                    help='Input folder or json file.')
parser.add_argument('--inputImages', metavar='IMAGES', type=str, nargs='*',
                    help='Input images.')
parser.add_argument('--output', metavar='FOLDER', type=str, required=True,
                    help='Output folder.')

parser.add_argument('--save', metavar='FOLDER', type=str, required=False,
                    help='Save the workflow to a meshroom files (instead of running it).')

parser.add_argument('--scale', type=int, default=2,
                    help='Downscale factor for MVS steps. Possible values are: 1, 2, 4, 8, 16.')

parser.add_argument('--toNode', metavar='NODE', type=str, nargs='*',
                    default=None,
                    help='Process the node(s) with its dependencies.')
parser.add_argument('--cache', metavar='FOLDER', type=str,
                    default=None,
                    help='Choose a custom cache folder')
parser.add_argument('--forceStatus', help='Force computation if status is RUNNING or SUBMITTED.',
                    action='store_true')
parser.add_argument('--forceCompute', help='Compute in all cases even if already computed.',
                    action='store_true')

args = parser.parse_args()

if not args.output and not args.save:
    print('Nothing to do. You need to set --output or --save.')
    exit(1)

if not args.input and not args.inputImages:
    print('Nothing to compute. You need to set --input or --inputImages.')
    exit(1)

graph = multiview.photogrammetry(inputFolder=args.input, inputImages=args.inputImages, output=args.output)
graph.findNode('DepthMap_1').downscale.value = args.scale

if args.save:
    graph.save(args.save)
    print('File successfully saved:', args.save)
    exit(0)

if args.cache:
    graph.cacheDir = args.cache

if not graph.cacheDir:
    graph.cacheDir = meshroom.core.defaultCacheFolder

toNodes = None
if args.toNode:
    toNodes = graph.findNodes(args.toNode)

meshroom.core.graph.executeGraph(graph, toNodes=toNodes, forceCompute=args.forceCompute, forceStatus=args.forceStatus)

